## Setting up your process

### Edit the process configuration file
Inside [process_cfg.py](./process_cfg.py), you need to fill out all of the necessary fields outlined below to configure the process you want to generate:

* **_tag_**: can be any name used to identify the process. It will be used as a directory name to save the MadGraph cards in [addons/cards/](addons/cards). It is important to remember this tag further along.
* **_model_name_**: here you can pass the exact name of the UFO model you would like to use to calculate the matrix elements for your process. These models can for example be found in the [feynrules model database](https://feynrules.irmp.ucl.ac.be/wiki/ModelDatabaseMainPage) and should be placed in [addons/models/](addons/models). Some models are already included by default:
  > * The [dim6top_LO_UFO](https://feynrules.irmp.ucl.ac.be/wiki/dim6top) model, used for the study of top quark physics with Effective Field Theory.
  > * The [Higgs_Effective_Couplings](https://feynrules.irmp.ucl.ac.be/wiki/HiggsEffectiveTheory) model, which introduces leading-order Higgs-gluon interactions.
  > * The [SMEFTsim_general_MwScheme_UFO_v3](https://feynrules.irmp.ucl.ac.be/wiki/SMEFT) model (Standard Model Effective Field Theory).

* **_processes_**: an array of strings, each representing a process you want to generate with Madgraph. These processes will be added together in the proc_card.dat.
* **_flavour_scheme_**: specify here whether you want to use the 4F (massive b, not in the proton pdf) or 5F scheme (massless b, included in the proton pdf). **This option only redefines the proton multiparticle!** It is therefore your responsibility to make sure the bottom quark mass is set accordingly in your model (preferably in a restriction card).
* **_precision_**: the order to which you would like to simulate your process. If `NLO` is specified, you need to have your decays be handled separately by MadSpin.
* **_madspin_commands_**: if the decays are handled by MadSpin, you can specify the necessary commands here similarly to the _processes_ array.

Additionally, there are fields related to the study of EFT operators. If these are not relevant to your process, you can simply state *no_reweights* in the **_reweighting_strategy_** field and leave all other fields empty.
* **_operators_**: an array of EFT operators you want to probe. The names should match exactly those in the `parameters.py` file in your UFO directory.
* **_baseline_values_**: an array of initial values for the Wilson coefficients of each operator. This defines the baseline scenario to which the reweighting factors will be calculated. The choice of these values is of crucial importance to ensure a proper coverage of the entire phase space. Putting all values to 0 (~SM) will most likely result in a bad coverage in the part of the Phase space where the EFT is expected to be most abundant, resulting in large weights and uncertain predictions of the yields and differential distributions. Properly assigning these values requires careful studies.
* **reweighting_strategy**: please choose one of the following options
  > **_no_reweights_**: no reweighting is applied<br/>
  > **_individual_**: each operator is varied individually<br/>
  > **_rnd_scan_**: a random scan over all operators is performed<br/>
  > **_grid_**: a rectangular grid of Wilson coefficients is scanned<br/>
  > **_minimal_**: a tetrahedron-construction of scan points that picks the minimal number of scan points needed for a fit of a given order<br/>
  > **_custom_**: a custom reweighting scheme is provided by the user
		
   Then navigate to the corresponding "if statement" and fill out the needed parameters:
   > **_individual_**: "`points_individual`" is an array of arrays where in each subarray the user has to manually specify the values of the WCs to be scanned for the corresponding operator (using the same ordering as the "`operators`" variable).<br/>
   > **_rnd_scan_**: specify in "`n_points`" the number of scan points (NOTE: for N operators you need at least `1 + 2*N + (N*(N-1))/2` scan points to determine the quadratic function of the cross section). Then specify the boundaries for each operator in "`boundaries`".<br/>
   > **_grid_**: specify in each subarray of "`boundaries_and_npoints`" the lower and upper boundary as well as the number of points to be scanned for each operator. For k points and N operators, a grid of k^N points will be constructed.<br/>
   > **_minimal_**: specify in each subarray of "`boundaries_minimal_scan`" the lower and upper boundary of each operator. Also the "`order`" of the fitted yield must be given (usually 2, but can be 1 for interference only or larger than 2 for multiple insertions of EFT operators).<br/>
   > **_custom_**: The user has to manually specify the dictionary "`reweight_dict_tmp_`" where each key,value pair represents one specific scenario of a given set of WCs.
   		
   Finally, the SM scenario (all WCs put to 0), will be included by default.
   The naming convention (when not defining "custom" as a reweighting strategy) is defined by the `translate_weight_name` helper function. It starts with "rwgt_", followed by listing all operators with their values. Decimal points are replaced by "p" and minus signs by "min".


### Create MadGraph cards for your process
The [prepare_process.py](prepare_process.py) script will read out the configuration from the [process_cfg.py](./process_cfg.py) file and construct the following cards in `addons/cards/<tag>`:
> run_card.dat<br/>
> proc_card.dat<br/>
> reweight_card.dat<br/>
> customizecards.dat<br/>
> madspin_card.dat<br/>
	
To this end, run:
```
python prepare_process.py
```

This will also create a copy of [submit_gridpack_template.sh](submit_gridpack_template.sh), which will be called "`submit_gridpack_T2B.sh`" and for which the chosen "`tag`" is correctly inserted in the script.

### Clone genproductions
*You only need to run this step once. If you have already cloned genproductions, proceed to [the next step](#14-move-cards-to-madgraph-working-directory)* 

For the production of CMS samples, we need the pull the [cms-sw/genproductions](https://github.com/cms-sw/genproductions.git) package from github. To this end, run:
```
source setup_production.sh
```
This will create a new directory called "genproductions" alongside your current mcgeneration repository and it will copy all the scripts, models, cards that you need to run your sample production. **Since the cards have already been moved to the appropriate directory, you can now proceed to [part 2](#2-creating-gridpack-and-launching-lhe-production).**

### Move cards to MadGraph working directory
After having produced the MadGraph cards, you can move the cards to the `genproductions/bin/MadGraph5_aMCatNLO/` directory using the command
```
sh move_cards.sh <TAG>
```
Make sure that you use exactly the same `tag` as the one you specified in the previous step. Afterwards, you are automatically directed to the `genproductions/bin/MadGraph5_aMCatNLO/` directory.
